{"version":3,"sources":["reportWebVitals.js","index.js","App.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById","contractAddress","props","componentDidMount","a","window","ethereum","web3Provider","enable","logError","web3","currentProvider","Web3","eth","net","getId","setState","updateBalance","setInterval","state","balance","message","error","className","onClick","deposit","catch","withdraw","split","map","line","style","color","contract","Contract","ABI","methods","call","parseInt","toString","console","String","log","renJS","amount","lockAndMint","asset","from","Bitcoin","to","Ethereum","sendTo","contractFn","contractParams","name","type","value","Buffer","mint","gatewayAddress","on","hash","txHash","depositLog","msg","utils","transactionExplorerLink","depositDetails","transaction","status","confirmed","target","confs","signed","recipient","prompt","burnAndRelease","Address","btcAddress","RenJS","toSmallestUnit","confirmations","burn","release","React","Component"],"mappings":"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","file":"static/js/main.b9d2c558.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React from \"react\";\nimport RenJS from \"@renproject/ren\";\nimport { Bitcoin, Ethereum } from \"@renproject/chains\";\nimport Web3 from \"web3\";\nimport \"./App.css\";\n\nimport ABI from \"./ABI.json\";\n\n// Replace with your contract's address.\nconst contractAddress = \"0xb9b0442DE9BC214a23B434Ee2Ec7AF8A4e1b3eeE\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      balance: 0,\n      message: \"\",\n      error: \"\",\n      renJS: new RenJS(\"testnet\"),\n    };\n  }\n\n  componentDidMount = async () => {\n    let web3Provider;\n\n    // Initialize web3 (https://medium.com/coinmonks/web3-js-ethereum-javascript-api-72f7b22e2f0a)\n    // Modern dApp browsers...\n    if (window.ethereum) {\n      web3Provider = window.ethereum;\n      try {\n        // Request account access\n        await window.ethereum.enable();\n      } catch (error) {\n        // User denied account access...\n        this.logError(\"Please allow access to your Web3 wallet.\");\n        return;\n      }\n    }\n    // Legacy dApp browsers...\n    else if (window.web3) {\n      web3Provider = window.web3.currentProvider;\n    }\n    // If no injected web3 instance is detected, fall back to Ganache\n    else {\n      this.logError(\"Please install MetaMask!\");\n      return;\n    }\n\n    const web3 = new Web3(web3Provider);\n\n    const networkID = await web3.eth.net.getId();\n    if (networkID !== 42) {\n      this.logError(\"Please set your network to Kovan.\");\n      return;\n    }\n\n    this.setState({ web3 }, () => {\n      // Update balances immediately and every 10 seconds\n      this.updateBalance();\n      setInterval(() => {\n        this.updateBalance();\n      }, 10 * 1000);\n    });\n  };\n\n  render = () => {\n    const { balance, message, error } = this.state;\n    return (\n      <div className=\"App\">\n        <p>Balance: {balance} BTC</p>\n        <p>\n          <button onClick={() => this.deposit().catch(this.logError)}>\n            Deposit 0.003 BTC\n          </button>\n        </p>\n        <p>\n          <button onClick={() => this.withdraw().catch(this.logError)}>\n            Withdraw {balance} BTC\n          </button>\n        </p>\n        {message.split(\"\\n\").map((line) => (\n          <p>{line}</p>\n        ))}\n        {error ? <p style={{ color: \"red\" }}>{error}</p> : null}\n      </div>\n    );\n  };\n\n  updateBalance = async () => {\n    const { web3 } = this.state;\n    const contract = new web3.eth.Contract(ABI, contractAddress);\n    const balance = await contract.methods.balance().call();\n    this.setState({ balance: parseInt(balance.toString()) / 10 ** 8 });\n  };\n\n  logError = (error) => {\n    console.error(error);\n    this.setState({ error: String((error || {}).message || error) });\n  };\n\n  log = (message) => {\n    this.setState({ message });\n  };\n\n  deposit = async () => {\n    this.logError(\"\"); // Reset error\n\n    const { web3, renJS } = this.state;\n\n    const amount = 0.003; // BTC\n    const mint = await renJS.lockAndMint({\n      // Send BTC from the Bitcoin blockchain to the Ethereum blockchain.\n      asset: \"BTC\",\n      from: Bitcoin(),\n      to: Ethereum(web3.currentProvider).Contract({\n        // The contract we want to interact with\n        sendTo: contractAddress,\n\n        // The name of the function we want to call\n        contractFn: \"deposit\",\n\n        // Arguments expected for calling `deposit`\n        contractParams: [\n          {\n            name: \"_msg\",\n            type: \"bytes\",\n            value: Buffer.from(`Depositing ${amount} BTC`),\n          },\n        ],\n      }),\n    });\n\n    // Show the gateway address to the user so that they can transfer their BTC to it.\n    this.log(`Deposit ${amount} BTC to ${mint.gatewayAddress}`);\n\n    mint.on(\"deposit\", async (deposit) => {\n      // Details of the deposit are available from `deposit.depositDetails`.\n\n      const hash = deposit.txHash();\n      const depositLog = (msg) =>\n        this.log(\n          `BTC deposit: ${Bitcoin.utils.transactionExplorerLink(\n            deposit.depositDetails.transaction,\n            \"testnet\"\n          )}\\n\n          RenVM Hash: ${hash}\\n\n          Status: ${deposit.status}\\n\n          ${msg}`\n        );\n\n      await deposit\n        .confirmed()\n        .on(\"target\", (target) => depositLog(`0/${target} confirmations`))\n        .on(\"confirmation\", (confs, target) =>\n          depositLog(`${confs}/${target} confirmations`)\n        );\n\n      await deposit\n        .signed()\n        // Print RenVM status - \"pending\", \"confirming\" or \"done\".\n        .on(\"status\", (status) => depositLog(`Status: ${status}`));\n\n      await deposit\n        .mint()\n        // Print Ethereum transaction hash.\n        .on(\"transactionHash\", (txHash) => depositLog(`Mint tx: ${txHash}`));\n\n      this.log(`Deposited ${amount} BTC.`);\n    });\n  };\n\n  withdraw = async () => {\n    this.logError(\"\"); // Reset error\n\n    const { web3, renJS, balance } = this.state;\n\n    const recipient = prompt(\"Enter BTC recipient:\");\n    const amount = balance;\n    const burnAndRelease = await renJS.burnAndRelease({\n      // Send BTC from Ethereum back to the Bitcoin blockchain.\n      asset: \"BTC\",\n      to: Bitcoin().Address(recipient),\n      from: Ethereum(web3.currentProvider).Contract((btcAddress) => ({\n        sendTo: contractAddress,\n\n        contractFn: \"withdraw\",\n\n        contractParams: [\n          {\n            type: \"bytes\",\n            name: \"_msg\",\n            value: Buffer.from(`Withdrawing ${amount} BTC`),\n          },\n          {\n            type: \"bytes\",\n            name: \"_to\",\n            value: Buffer.from(btcAddress),\n          },\n          {\n            type: \"uint256\",\n            name: \"_amount\",\n            value: RenJS.utils.toSmallestUnit(amount, 8),\n          },\n        ],\n      })),\n    });\n\n    let confirmations = 0;\n    await burnAndRelease\n      .burn()\n      // Ethereum transaction confirmations.\n      .on(\"confirmation\", (confs) => {\n        confirmations = confs;\n      })\n      // Print Ethereum transaction hash.\n      .on(\"transactionHash\", (txHash) =>\n        this.log(`Ethereum transaction: ${String(txHash)}\\nSubmitting...`)\n      );\n\n    await burnAndRelease\n      .release()\n      // Print RenVM status - \"pending\", \"confirming\" or \"done\".\n      .on(\"status\", (status) =>\n        status === \"confirming\"\n          ? this.log(`${status} (${confirmations}/15)`)\n          : this.log(status)\n      )\n      // Print RenVM transaction hash\n      .on(\"txHash\", this.log);\n\n    this.log(`Withdrew ${amount} BTC to ${recipient}.`);\n  };\n}\n\nexport default App;\n"],"sourceRoot":""}